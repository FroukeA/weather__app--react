{"ast":null,"code":"var _jsxFileName = \"/Users/frouie/Documents/GitHub/weather__app--react/src/utils/common/commonUtils.js\";\nimport React from \"react\";\nimport handleCreateFormArray from \"./forms/forms\";\nimport { forms } from \"../../constants/conf\";\nimport { forecast_data } from \"../../constants/mock\";\nimport Form from \"../../components/common/blocks/form/Form\";\nimport Input from \"../../components/ui/inputs/Input\";\nimport List from \"../../components/common/blocks/list/List\";\nimport Card from \"../../components/common/blocks/cards/Card\";\nimport Term from \"../../components/common/elements/list/Term\";\nimport TextDiscription from \"../../components/common/elements/list/TextDiscription\";\nimport GroupDiscription from \"../../components/common/blocks/list/GroupDiscription\";\nimport TextItem from \"../../components/common/elements/list/TextItem\";\nimport CustomBoxInput from \"../../components/ui/groups/CustomBoxInput\";\nimport Button from \"../../components/ui/buttons/Button\";\nlet structureCopy = null;\nexport function buidCardContent(content) {\n  console.log(\"debug card\", content);\n}\nexport function renderElementItems(array) {\n  return array.map((item, i) => {\n    let todo = null;\n\n    if (item.data.length === 0) {\n      // NO data comes from external source, data comes from constants\n      if (item.type === \"list\" || item.type === \"discription_group\") {\n        // DOM is a list of any type or group dd\n        // render list !!! type = trough props\n        todo = renderComponent(item, i, null);\n      } else if (item.parts.length > 0) {\n        // Nested DOM\n        todo = /*#__PURE__*/React.createElement(item.element, {\n          key: i,\n          className: createClass(item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        }, renderElementItems(item.parts));\n      } else {\n        // Single DOM\n        if (item.type === \"discription\" || item.type === \"term\" || item.type === \"textItem\" || item.type === \"button\" || item.type === \"customBoxInput\") {\n          return renderComponent(item, i, null);\n        } else {\n          todo = renderElement(item, i, null);\n        }\n      }\n    } else {\n      // data comes from external source, data does NOT come from constants\n      if (item.parts[0] !== undefined) {\n        const data = forecast_data;\n\n        if (item.parts.length > 0) {\n          // Nested DOM\n          structureCopy = item.parts[0];\n          todo = /*#__PURE__*/React.createElement(item.element, {\n            key: i,\n            className: createClass(item),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }\n          }, data.map((dataItem, i) => {\n            // What do we have? data & print of structure. need structure ask custom data and what overide it with data from dataitem\n            return item.parts[0].type === \"card\" ? // before render merge data into structure\n            todo = renderComponent(item.parts[0], \"card\" + i) : null; //   handleMerge(structureCopy, dataItem, \"card\")\n            // : null;\n          }));\n        }\n      }\n    }\n\n    return todo;\n  });\n}\nexport function renderElement(item, key) {\n  if (item.data.length === 0) {\n    // NO data comes from external source, data comes from constants\n    if (item.type === \"form\") {\n      // DOM is a form\n      // collect the form data\n      const array = handleCreateFormArray(forms, null, item.id, null, null, null); // render form\n\n      return renderComponent(item, \"form\" + key, array); // return <Form key={\"form\" + key} array={array} />;\n    } else if (item.id.includes(\"wi\")) {\n      return (\n        /*#__PURE__*/\n        // DOM is a input of any kind\n        // render input !!! type = trough props\n        React.createElement(Input, {\n          class: createClass(item),\n          base: item.ref,\n          type: item.type,\n          id: item.id,\n          name: item.id,\n          placeholder: item.label,\n          required: item.required,\n          reference: item.ref,\n          key: \"input\" + key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 9\n          }\n        })\n      );\n    } else if (item.parts[0] !== undefined) {\n      if (item.part[0].type === \"card\") {\n        return (// DOM is a card\n          // render card !!! content = interactive created by creatElement\n          renderComponent(item, \"\")\n        );\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(item.element, {\n        key: \"element\" + key,\n        className: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }, item.label);\n    }\n  } else {\n    // data comes from external source, data does NOT come from constants\n    if (item.parts[0] !== undefined) {\n      if (item.part[0].type === \"card\") {\n        return (// DOM is a card\n          // render card !!! content = interactive created by creatElement\n          renderComponent(item, \"\")\n        );\n      }\n    }\n  }\n}\nexport function renderComponent(item, key, array) {\n  switch (item.type) {\n    case \"list\":\n      return /*#__PURE__*/React.createElement(List, {\n        key: \"list\" + key,\n        class: createClass(item),\n        item: item,\n        createElement: createElement.bind(this),\n        createClass: createClass.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      });\n\n    case \"card\":\n      return /*#__PURE__*/React.createElement(Card, {\n        key: key,\n        class: createClass(item),\n        content: item,\n        createElement: createElement.bind(this),\n        createClass: createClass.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      });\n\n    case \"form\":\n      return /*#__PURE__*/React.createElement(Form, {\n        key: key,\n        array: array,\n        class: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 14\n        }\n      });\n\n    case \"term\":\n      return /*#__PURE__*/React.createElement(Term, {\n        key: key,\n        item: item,\n        class: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 14\n        }\n      });\n\n    case \"discription\":\n      return /*#__PURE__*/React.createElement(TextDiscription, {\n        key: key,\n        item: item,\n        class: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      });\n\n    case \"discription_group\":\n      return /*#__PURE__*/React.createElement(GroupDiscription, {\n        key: key,\n        class: createClass(item),\n        item: item,\n        createElement: createElement.bind(this),\n        createClass: createClass.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      });\n\n    case \"customBoxInput\":\n      return /*#__PURE__*/React.createElement(CustomBoxInput, {\n        key: key,\n        class: createClass(item),\n        item: item,\n        createElement: createElement.bind(this),\n        createClass: createClass.bind(this),\n        content: item.parts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }\n      });\n\n    case \"item\":\n      return /*#__PURE__*/React.createElement(TextItem, {\n        key: key,\n        item: item,\n        class: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 14\n        }\n      });\n\n    case \"button\":\n      return /*#__PURE__*/React.createElement(Button, {\n        key: key,\n        item: item,\n        label: item.label,\n        class: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      console.log(`ERROR: no types are matching ${item.type}.`);\n  }\n}\nexport function createElement(item, key) {\n  if (item.parts.length > 0) {\n    // Nested DOM\n    if (item.type === \"card\") {\n      return renderComponent(item, \"\", null, null);\n    } else {\n      return /*#__PURE__*/React.createElement(item.element, {\n        key: key,\n        className: createClass(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 9\n        }\n      }, renderElementItems(item.parts));\n    }\n  } else {\n    // Single DOM\n    if (item.type === \"discription\" || item.type === \"term\" || item.type === \"textItem\" || item.type === \"button\" || item.type === \"customBoxInput\") {\n      return renderComponent(item, key, null);\n    } else {\n      return renderElement(item, key);\n    }\n  }\n} // add styling and SCSS\n\nexport function createClass(item) {\n  let c = ``;\n\n  if (item.ref) {\n    if (item.class.length > 0) {\n      item.class.forEach(e => {\n        c = `${item.ref}__${item.type} ${item.ref}__${item.type}--${e.label}`;\n      });\n    } else {\n      c = `${item.ref}__${item.type}`;\n    }\n  } else {\n    if (item.class.length > 0) {\n      item.class.forEach(e => {\n        c = `${item.type} ${item.type}--${e.label}`;\n      });\n    } else {\n      c = `${item.type}`;\n    }\n  }\n\n  return c;\n} // add data\n\nexport function handleMergeElementItems(array, data, key) {\n  return array.map((item, i) => {\n    return handleMerge(item, data, key);\n  });\n}\nexport function handleMergeData(structureElement, data, key) {\n  structureElement.label = data.data.day;\n  return createElement(structureCopy, key, \"new data\");\n}\nexport function handleMerge(structureElement, data, key) {\n  if (structureElement.parts.length > 0) {\n    // nested structure\n    if (handleCheckIfNot(structureElement.link, \"\")) {\n      // data needed in this layer\n      return handleMergeData(structureElement, data, key);\n    } else {\n      // NO data needed in this layer\n      handleMergeElementItems(structureElement.parts, data, key);\n    }\n  } else {\n    // single dom\n    if (handleCheckIfNot(structureElement.link, \"\")) {\n      // data needed in this layer\n      handleMergeData(structureElement, data, key);\n    } else {// NO data needed in this layer\n      // renderComponent(structureElement, key);\n    }\n  }\n}\nexport function handleCheckIfNot(element, condition) {\n  return element !== condition;\n}","map":{"version":3,"sources":["/Users/frouie/Documents/GitHub/weather__app--react/src/utils/common/commonUtils.js"],"names":["React","handleCreateFormArray","forms","forecast_data","Form","Input","List","Card","Term","TextDiscription","GroupDiscription","TextItem","CustomBoxInput","Button","structureCopy","buidCardContent","content","console","log","renderElementItems","array","map","item","i","todo","data","length","type","renderComponent","parts","createClass","renderElement","undefined","dataItem","key","id","includes","ref","label","required","part","createElement","bind","c","class","forEach","e","handleMergeElementItems","handleMerge","handleMergeData","structureElement","day","handleCheckIfNot","link","element","condition"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport handleCreateFormArray from \"./forms/forms\";\n\nimport { forms } from \"../../constants/conf\";\nimport { forecast_data } from \"../../constants/mock\";\n\nimport Form from \"../../components/common/blocks/form/Form\";\nimport Input from \"../../components/ui/inputs/Input\";\nimport List from \"../../components/common/blocks/list/List\";\nimport Card from \"../../components/common/blocks/cards/Card\";\nimport Term from \"../../components/common/elements/list/Term\";\nimport TextDiscription from \"../../components/common/elements/list/TextDiscription\";\nimport GroupDiscription from \"../../components/common/blocks/list/GroupDiscription\";\nimport TextItem from \"../../components/common/elements/list/TextItem\";\nimport CustomBoxInput from \"../../components/ui/groups/CustomBoxInput\";\nimport Button from \"../../components/ui/buttons/Button\";\n\nlet structureCopy = null;\n\nexport function buidCardContent(content) {\n  console.log(\"debug card\", content);\n}\n\nexport function renderElementItems(array) {\n  return array.map((item, i) => {\n    let todo = null;\n\n    if (item.data.length === 0) {\n      // NO data comes from external source, data comes from constants\n\n      if (item.type === \"list\" || item.type === \"discription_group\") {\n        // DOM is a list of any type or group dd\n        // render list !!! type = trough props\n        todo = renderComponent(item, i, null);\n      } else if (item.parts.length > 0) {\n        // Nested DOM\n        todo = (\n          <item.element key={i} className={createClass(item)}>\n            {renderElementItems(item.parts)}\n          </item.element>\n        );\n      } else {\n        // Single DOM\n        if (\n          item.type === \"discription\" ||\n          item.type === \"term\" ||\n          item.type === \"textItem\" ||\n          item.type === \"button\" ||\n          item.type === \"customBoxInput\"\n        ) {\n          return renderComponent(item, i, null);\n        } else {\n          todo = renderElement(item, i, null);\n        }\n      }\n    } else {\n      // data comes from external source, data does NOT come from constants\n      if (item.parts[0] !== undefined) {\n        const data = forecast_data;\n        if (item.parts.length > 0) {\n          // Nested DOM\n\n          structureCopy = item.parts[0];\n\n          todo = (\n            <item.element key={i} className={createClass(item)}>\n              {data.map((dataItem, i) => {\n                // What do we have? data & print of structure. need structure ask custom data and what overide it with data from dataitem\n                return item.parts[0].type === \"card\"\n                  ? // before render merge data into structure\n                    (todo = renderComponent(item.parts[0], \"card\" + i))\n                  : null;\n                //   handleMerge(structureCopy, dataItem, \"card\")\n                // : null;\n              })}\n            </item.element>\n          );\n        }\n      }\n    }\n\n    return todo;\n  });\n}\n\nexport function renderElement(item, key) {\n  if (item.data.length === 0) {\n    // NO data comes from external source, data comes from constants\n    if (item.type === \"form\") {\n      // DOM is a form\n      // collect the form data\n      const array = handleCreateFormArray(\n        forms,\n        null,\n        item.id,\n        null,\n        null,\n        null\n      );\n\n      // render form\n      return renderComponent(item, \"form\" + key, array);\n      // return <Form key={\"form\" + key} array={array} />;\n    } else if (item.id.includes(\"wi\")) {\n      return (\n        // DOM is a input of any kind\n        // render input !!! type = trough props\n        <Input\n          class={createClass(item)}\n          base={item.ref}\n          type={item.type}\n          id={item.id}\n          name={item.id}\n          placeholder={item.label}\n          required={item.required}\n          reference={item.ref}\n          key={\"input\" + key}\n        />\n      );\n    } else if (item.parts[0] !== undefined) {\n      if (item.part[0].type === \"card\") {\n        return (\n          // DOM is a card\n          // render card !!! content = interactive created by creatElement\n          renderComponent(item, \"\")\n        );\n      }\n    } else {\n      return (\n        <item.element key={\"element\" + key} className={createClass(item)}>\n          {item.label}\n        </item.element>\n      );\n    }\n  } else {\n    // data comes from external source, data does NOT come from constants\n    if (item.parts[0] !== undefined) {\n      if (item.part[0].type === \"card\") {\n        return (\n          // DOM is a card\n          // render card !!! content = interactive created by creatElement\n          renderComponent(item, \"\")\n        );\n      }\n    }\n  }\n}\n\nexport function renderComponent(item, key, array) {\n  switch (item.type) {\n    case \"list\":\n      return (\n        <List\n          key={\"list\" + key}\n          class={createClass(item)}\n          item={item}\n          createElement={createElement.bind(this)}\n          createClass={createClass.bind(this)}\n        />\n      );\n    case \"card\":\n      return (\n        <Card\n          key={key}\n          class={createClass(item)}\n          content={item}\n          createElement={createElement.bind(this)}\n          createClass={createClass.bind(this)}\n        />\n      );\n    case \"form\":\n      return <Form key={key} array={array} class={createClass(item)} />;\n    case \"term\":\n      return <Term key={key} item={item} class={createClass(item)} />;\n    case \"discription\":\n      return (\n        <TextDiscription key={key} item={item} class={createClass(item)} />\n      );\n    case \"discription_group\":\n      return (\n        <GroupDiscription\n          key={key}\n          class={createClass(item)}\n          item={item}\n          createElement={createElement.bind(this)}\n          createClass={createClass.bind(this)}\n        />\n      );\n    case \"customBoxInput\":\n      return (\n        <CustomBoxInput\n          key={key}\n          class={createClass(item)}\n          item={item}\n          createElement={createElement.bind(this)}\n          createClass={createClass.bind(this)}\n          content={item.parts}\n        />\n      );\n    case \"item\":\n      return <TextItem key={key} item={item} class={createClass(item)} />;\n    case \"button\":\n      return (\n        <Button\n          key={key}\n          item={item}\n          label={item.label}\n          class={createClass(item)}\n        />\n      );\n\n    default:\n      console.log(`ERROR: no types are matching ${item.type}.`);\n  }\n}\n\nexport function createElement(item, key) {\n  if (item.parts.length > 0) {\n    // Nested DOM\n    if (item.type === \"card\") {\n      return renderComponent(item, \"\", null, null);\n    } else {\n      return (\n        <item.element key={key} className={createClass(item)}>\n          {renderElementItems(item.parts)}\n        </item.element>\n      );\n    }\n  } else {\n    // Single DOM\n    if (\n      item.type === \"discription\" ||\n      item.type === \"term\" ||\n      item.type === \"textItem\" ||\n      item.type === \"button\" ||\n      item.type === \"customBoxInput\"\n    ) {\n      return renderComponent(item, key, null);\n    } else {\n      return renderElement(item, key);\n    }\n  }\n}\n\n// add styling and SCSS\nexport function createClass(item) {\n  let c = ``;\n\n  if (item.ref) {\n    if (item.class.length > 0) {\n      item.class.forEach((e) => {\n        c = `${item.ref}__${item.type} ${item.ref}__${item.type}--${e.label}`;\n      });\n    } else {\n      c = `${item.ref}__${item.type}`;\n    }\n  } else {\n    if (item.class.length > 0) {\n      item.class.forEach((e) => {\n        c = `${item.type} ${item.type}--${e.label}`;\n      });\n    } else {\n      c = `${item.type}`;\n    }\n  }\n\n  return c;\n}\n\n// add data\nexport function handleMergeElementItems(array, data, key) {\n  return array.map((item, i) => {\n    return handleMerge(item, data, key);\n  });\n}\n\nexport function handleMergeData(structureElement, data, key) {\n  structureElement.label = data.data.day;\n\n  return createElement(structureCopy, key, \"new data\");\n}\n\nexport function handleMerge(structureElement, data, key) {\n  if (structureElement.parts.length > 0) {\n    // nested structure\n    if (handleCheckIfNot(structureElement.link, \"\")) {\n      // data needed in this layer\n      return handleMergeData(structureElement, data, key);\n    } else {\n      // NO data needed in this layer\n      handleMergeElementItems(structureElement.parts, data, key);\n    }\n  } else {\n    // single dom\n    if (handleCheckIfNot(structureElement.link, \"\")) {\n      // data needed in this layer\n      handleMergeData(structureElement, data, key);\n    } else {\n      // NO data needed in this layer\n      // renderComponent(structureElement, key);\n    }\n  }\n}\n\nexport function handleCheckIfNot(element, condition) {\n  return element !== condition;\n}\n"]},"metadata":{},"sourceType":"module"}